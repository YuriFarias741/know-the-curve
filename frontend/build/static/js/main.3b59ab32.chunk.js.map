{"version":3,"sources":["assets/img/background.jpg","components/sidebar.tsx","utils/pscb.js","pages/home.jsx","services/api.ts","components/header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Sidebar","scrollTo","elementId","element","document","getElementById","scrollIntoView","behavior","className","onClick","pSBC","MapContainer","props","showDetails","state","renderPolygons","states","map","key","sigla","path","coordinates","strokeColor","fillColor","_","strokeWeight","fillOpacity","rendermarker","console","log","geo","position","name","loadingMap","loadingChart","chart","country","polygonsNomalized","Object","keys","polygonsJson","id","filter","i","length","lat","lng","Promise","resolve","reject","a","fetch","response","json","responseJson","data","then","setState","resources","LatLonJson","cases","slope","catch","err","text","google","this","containerStyle","width","height","initialCenter","onCenterChanged","m","p","e","center","zoom","srcDoc","Component","GoogleApiWrapper","apiKey","Header","src","image","alt","App","exact","component","Mapa","Boolean","window","location","hostname","match","process","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3b59ab32.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.7e33fac6.jpg\";","import React from 'react';\nimport './sidebar.css';\n\nconst Sidebar: React.FC = () => {\n  const scrollTo = (elementId: string) => {\n    const element = document.getElementById(elementId);\n    if (element) {\n      element.scrollIntoView({behavior: 'smooth'});\n    }\n  };\n  return (\n    <div className=\"sideBar\">\n      <div className=\"title\">Grupo Aipim</div>\n      <div className=\"menu\">\n        <a className=\"menu-item\" onClick={() => scrollTo('about')}>\n          <i className=\"fas fa-info-circle\"></i>\n          <div className=\"title\">Sobre</div>\n        </a>\n        <a className=\"menu-item\" onClick={() => scrollTo('maps')}>\n          <i className=\"far fa-map\"></i>\n          <div className=\"title\">Mapa</div>\n        </a>\n        <a className=\"menu-item\" onClick={() => scrollTo('chart')}>\n          <i className=\"fas fa-chart-line\"></i>\n          <div className=\"title\">Gráfico</div>\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import pSBC from 'shade-blend-color';\n\n\nexport default pSBC","import React, {Component} from 'react';\nimport {Map, Polygon, GoogleApiWrapper, Marker} from 'google-maps-react';\nimport '../assets/form.css';\nimport './mapa.css';\nimport * as _ from 'lodash';\nimport polygonsJson from '../assets/polygons.json';\nimport pSBC from '../utils/pscb';\nimport {fetchCoutryResources} from '../services/api';\nimport LatLonJson from '../assets/latlon.json';\n\nexport class MapContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      states: [],\n      loadingMap: true,\n      loadingChart: true,\n      chart: '',\n    };\n  }\n\n  componentDidMount() {\n    let polygonsNomalized = Object.keys(polygonsJson).map(key => {\n      return {\n        id: key,\n        sigla: key,\n        coordinates: _.get(polygonsJson, key)\n          .filter(i => i.length > 0)\n          .map(geo => ({\n            lat: geo[1],\n            lng: geo[0],\n          })),\n      };\n    });\n    fetchCoutryResources('brazil')\n      .then(data => {\n        this.setState({\n          loadingMap: false,\n          states: polygonsNomalized.map(state => {\n            const resources = _.find(data, {state: state.sigla});\n            const geo = _.get(LatLonJson, state.sigla);\n            return {\n              ...state,\n              geo: {\n                lat: _.get(geo, 'lat'),\n                lng: _.get(geo, 'lon'),\n              },\n              data: {\n                cases: _.get(resources, 'data.cases', 0),\n                slope: _.get(resources, 'data.slope', 0),\n              },\n            };\n          }),\n        });\n      })\n      .catch(err => {\n        this.setState({\n          loadingMap: false,\n        });\n        console.log(err);\n      });\n    fetch(`http://localhost:8000/api/brazil/demographic_density`)\n      .then(response => response.text())\n      .then(data => {\n        this.setState({\n          ...this.state,\n          loadingChart: false,\n          chart: data,\n        });\n      })\n      .catch(err => {\n        this.setState({...this.state, loadingChart: false});\n        console.log(err);\n      });\n  }\n  showDetails = state => {};\n  renderPolygons = () => {\n    return this.state.states.map(state => {\n      return (\n        <Polygon\n          key={'Polygon' + state.sigla}\n          path={state.coordinates}\n          strokeColor={'#ccc'}\n          fillColor={pSBC(\n            0.01 * (_.get(state, 'data.slope', 0) / 100),\n            'rgb(255,255,255)',\n            'rgb(225, 44, 61)'\n          )}\n          strokeWeight={1}\n          fillOpacity={0.7}\n          onClick={() => this.showDetails(state)}\n        />\n      );\n    });\n  };\n  rendermarker = () => {\n    return this.state.states.map(state => {\n      console.log(state.geo);\n      return (\n        <Marker\n          key={'Marker' + state.sigla}\n          position={state.geo}\n          name={state.sigla}\n        />\n      );\n    });\n  };\n  render() {\n    const containerStyle = {\n      position: 'relative',\n      width: '100%',\n      height: '100%',\n    };\n\n    // handlerChangeState = (event) => {};\n    return (\n      <>\n        <div className=\"container-fluid content content\" id=\"maps\">\n          <div className=\"row\">\n            <div className=\"col-md-3 col-sm-12 col-sm-12 mapa-info\">\n              <h2>Mapa de propagação</h2>\n              <p>\n                O mapa ao lado traz, em um primeiro momento, um panorama dos\n                casos de covid-19 no Brasil. Por se tratar de um mapa de calor,\n                a intensidade de suas cores é determinada com base no alto\n                índice de propagação do coronavírus em cada região. Além disso,\n                o mapa permite analisar a situação em cada estado do país, de\n                forma mais detalhada. Ao selecionar o estado que se “deseja”, o\n                crescimento da doença no local será representado por meio de um\n                gráfico. Este, por sua vez, corresponde à curva da doença para\n                aquele estado.\n              </p>\n            </div>\n            <div className=\"col-md-9 col-sm-12\">\n              <div className=\"mapa\">\n                <Map\n                  google={this.props.google}\n                  containerStyle={containerStyle}\n                  initialCenter={{\n                    lat: -17.17999531784841,\n                    lng: -57.23911032110355,\n                  }}\n                  onCenterChanged={(m, p, e) => {\n                    console.log(p.center.lat(),p.center.lng())\n                  }}\n                  zoom={4}\n                >\n                  {this.renderPolygons()}\n                  {/* {this.rendermarker()} */}\n                </Map>\n                {this.state.loadingMap && (\n                  <div className=\"loading\">\n                    <i className=\"fas fa-circle-notch fa-spin\"></i>\n                    Carregando dados...\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"container-fluid content charts\" id=\"chart\">\n          <div className=\"row\">\n            <div className=\"col-md-9 col-sm-12\">\n              <iframe className=\"chartFrame\" srcDoc={this.state.chart}></iframe>\n              {this.state.loadingChart && (\n                <div className=\"loading\">\n                  <i className=\"fas fa-circle-notch fa-spin\"></i>\n                  Carregando dados...\n                </div>\n              )}\n            </div>\n            <div className=\"col-md-3 col-sm-12 mapa-info\">\n              <h2>Densidade demográfica</h2>\n              <p>\n                O gráfico ao lado traz uma correlação de densidade demográfica\n                com casos confirmados de covid-19.\n              </p>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyA4FiGeCZpUpO663wOfg-23qpr1-bLPZU4',\n})(MapContainer);\n","import axios from 'axios';\nimport * as _ from 'lodash';\nimport {CountryResources} from '../interfaces/map-interface';\n\nexport const fetchCoutryResources = (\n  country: string\n): Promise<CountryResources[]> => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await fetch(`http://localhost:8000/api/${country}/`);\n      const responseJson = await response.json();\n      const data = Object.keys(responseJson).map(key => {\n        return {\n          state: key,\n          data: _.get(responseJson, key),\n        };\n      });\n      resolve(data);\n    } catch (err) {\n      console.log(err);\n      reject(err);\n    }\n  });\n};\n","import React from 'react';\nimport './header.css';\nimport image from '../assets/img/background.jpg';\n\nconst Header: React.FC = () => {\n  return (\n    <div className=\"container-fluid content header-fluid\" id=\"about\">\n      <div className=\"header row\">\n        <div className=\"col-md-6 col-sm-12\">\n          <h1> know the curve_ </h1>\n          <h3>Por grupo aipim</h3>\n          <br></br>\n          <p>\n            O know the curve_ é um sistema de suporte à tomada de decisão, com a\n            finalidade de expor, de forma didática, informações de macro e\n            microescala simultaneamente. Tendo como proposta a identificação de\n            padrões entre a atividade humana e os casos de COVID-19, o\n            aplicativo(?) se propõe a encontrar fatores que possam prever pontos\n            críticos da propagação da doença. O know the curve_ atua\n            correlacionando dados de densidade demográfica, determinantes\n            sociais de saúde e dados existentes sobre o coronavírus, com o\n            objetivo de criar um mapa de calor com a previsão do avanço do\n            Covid-19 por região, para que, assim, seja possível identificar os\n            lugares em que a propagação da doença é maior.\n          </p>\n        </div>\n        <div className=\"col-md-6 col-sm-12\">\n          <img src={image} alt=\"Grupo aipim\" className=\"image\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport Sidebar from './components/sidebar';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport Mapa from './pages/home';\nimport Header from './components/header';\nimport {ScrollArea} from 'react-scroll-to';\n\nimport './App.css';\nimport './assets/grid.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Sidebar />\n      <Header />\n      <BrowserRouter>\n        <Switch>\n          <ScrollArea id=\"map\">\n            <Route path=\"/\" exact={true} component={Mapa} />\n          </ScrollArea>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/global.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nif (process.env.NODE_ENV === 'development') {\n  require('dotenv').config('../.env');\n}\nconsole.log(process.env);\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}